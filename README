
/////////////  ////          /////////////   ///             //////////  //////////  ///     ///
    ////      ////          ////            ///                    ///  ///    ///  ///   ///
   ////      ////          //////////////  ////////////  ////////////  //////////  /// ///
  ////      ////                    ////  ///      ///  ///      ///  /// ///     ///    ///
 ////      /////////////  /////////////  ///      ///  ////////////  ///   ///   ///       ///
-----------------------------------------------------------------------------------------------------------



Overview
--------
The main idea is to offer a tool to test the TLS authentication of a server in communications 
that follow the Client-Server scheme. For this purpose, TLShark includes six modes of operation.

The Verbose mode is a network sniffer that filters and displays in detail the information contained 
in the Client Hello, Server Hello and Certificate messages of the TLS handshake protocol, the Cerlog 
mode is in charge of collecting all the necessary information to raise a server or proxy from a 
Client-Server communication, the Rogue mode is in charge of raising a server from the information 
contained in the json file generated by Cerlog, the transparent Mitmproxy mode raises a transparent 
proxy, as a "man-in-the-middle" attack, from the information contained in the json file generated by 
Cerlog, the reverse Mitmproxy mode can raise a reverse proxy, as a "man-in-the-middle" attack, from 
a url corresponding to a server and finally, the TLS version detector mode is responsible for raising 
a server that accepts requests to discover the TLS version of a machine. 


> When running Verbose or Cerlog mode, two directory trees will be generated. 
	* tlshark_tmp will be generated in the /tmp folder and will only remain on the system during 
	  the current session. This directory contains the certificates captured (both by Verbose 
	  mode and Cerlog mode) and the certificates cloned by Cerlog mode.
	* tlshark_json will be generated in the directory from which tlshark is executed and will 
	  be kept permanently. It contains the json files that generate both Verbose mode and Cerlog 
	  mode. 

> If the communication uses TLS v1.3 the Cerlog mode will not be able to capture the certificate 
  information and therefore the corresponding json file will not be generated. On the other hand, 
  the Verbose mode will not be able to capture the certificates. This is due to the fact that in 
  TLS v1.3 the certificates are encrypted in the communication.

> If a json file already exists when generating another one, an error message will be displayed and 
  the option to overwrite the file will be allowed. This message will often appear when executing 
  Cerlog mode from a pcap file, since each communication contained in this file will be identified
  with an ID, and this value will not change in successive executions.
  
> To identify TLS cipher suites, the program uses a dictionary built into the TLShark library. This 
  dictionary also contains the SSL translation of these cipher suites, which uses Rogue mode to raise 
  the server. It is possible that at some point an error message will appear if the server you intend 
  to impersonate uses a cipher suite that does not have translation to SSl format, this can only occur 
  if the cipher suite category is L or NR.
  
> It is important to note that when using the -pcap flag the program will load all the information 
  directly from the .pcap file, so that this information will be subject to the ip and port parameters 
  of the capture.

> TLShark is intended for use on kali 2022.3 64bit Linux, there is no guarantee that it will work correctly 
  on other distributions.
  
> TLShark uses the Apostille software included in the archive; it also uses Python3 3.10.5, tsahrk 3.6.6, 
  OpenSSL 3.0.4 and the Mitmproxy software version 8.0.0 which is natively available in Kali Linux.




Installation
------------
To install TLShark access the contents of the TLShark folder and follow the steps below:

	1.- Mitmproxy software is usually pre-installed on Kali Linux. 
	    If not, you must install it.
	    $ sudo apt install mitmproxy
	    
	2.- Copy the apostille folder to the path: /opt:
	    $ sudo cp -r apostille /opt

	3.- Install the library tlshark-1.0.tar.gz.
	    $ pip install tlshark-1.0.tar.gz
	    
	4.- (Optional/Recommendable) When the installation of the tlshark-1.0.tar.gz package 
	    is finished, the directory where tlshark is located will be indicated. Take this file 
	    and copy it to some directory in $PATH. 




VERBOSE MODE: [-i, -sp, -ip, -sip, -cip, -client/-server/-all, -c, -pcap]
-------------
This mode sniffs the traffic exchanged during the tls handshake, captures relevant information 
from the messages and displays it packet by packet. 

Avaiable flags:
	-i: interface of the client machine, i.e., the machine from which TLShark is running. 
	    The format of tshark should be used to indicate the argument of this flag. 
	    eth0 by default.
	-sp: TCP port of the Server machine.
	-ip: ip address of the target machine.
	-sip: server machine IP address.
	-cip: client machine IP address. 
	-client/-server/-all: Indicates the type of information to be displayed.
		-client: will only display information obtained from Client Hello messages.
		-server: will only display information obtained from Server Hello messages.
		-all: will display information about both Client Hello and Server Hello messages.
	-c: will display information about both Client Hello and Server Hello messages.
	-pcap: enable Verbose mode to work from a pcap capture. You must include the absolute path 
	       of the .pcap file.
	     
> The -ip flag includes the "ip.addr" filter. It is used when you want to get all messages such 
  as Client Hello (-client), Server Hello (-server), Crertificate (-c), etc, going in or out of 
  this address. 	

> The name of the json file generated by Verbose mode includes the current date and time when it 
  was generated. A single json file is generated for each Verbose mode run with all the traffic 
  information captured during the run. This file will be generated when tlshark is interrupted 
  with Ctrl+c or on termination, if the pcap option is used.


Examples
--------
$ tlshark -verbose -all -c -ip 192.168.24.2
$ tlshark -verbose -server -c -sip 10.219.2.56 -i any
$ tlshark -verbose -all -c -cip 192.168.74.132 -pcap /path/to/capture.pcap




CERLOG MODE: [-i, -sp, -sip, -cip, -pcap]
------------
This mode sniffs the traffic exchanged during the tls handshake and stores the information 
differentiating each connection with the corresponding ID. The sequence will be complete when 
the Cerlog mode has detected the sequence Client Hello --> Server Hello --> Certificate for the 
same connection. At this moment Jackal obtains the chain of cloned certificates and a .json file
will be generated with the information corresponding to this connection.  for this connection. 
This is the information necessary for the operation of Rogue mode. 

Avaiable flags:
	-i: interface of the client machine, i.e., the machine from which TLShark is running. 
	    The format of tshark should be used to indicate the argument of this flag. 
	    eth0 by default.
	-sp: TCP port of the Server machine.
	-sip: server machine IP address.
	-cip: client machine IP address.
	-pcap: enable Cerlog mode to work from a pcap capture. You must include the absolute path 
	       of the .pcap file.

> The ID value that appears in the name and content of Cerlog mode json files is a variable used 
  throughout the program to identify a connection and matches the value of the client port. 
  
> The json file will be generated when the process is interrupted by Ctrl+c or at the end of the 
  process if pcap operation is enabled. In any case it is recommended to interrupt the process 
  after the SUCCESFULL END! message so that the corresponding json contains all the information.


Examples
--------
$ tlshark -cerlog 
$ tlshark -cerlog -i any -sp 80 -cip 192.168.74.134 -pcap path/to/file.pcap 




ROGUE MODE: [-json]
-----------
This mode collects the information hosted in the json files stored in the cerlog_json folder and 
displays the servers that are available for impersonation. Once one is chosen, Rogue raises a 
server using the information hosted in the corresponding json file (TLS version, cipher suite 
and server port) with the cloned certificate and an associated private key. 

Avaiable flags:
	-json: allows to load information from a server from a specific json file, in the format 
	       generated by Cerlog.

> This mode uses the json files generated by the Cerlog mode, therefore, it must be executed 
  previously in order to fill the cerlog_json folder or load the information from a 
  a json file.


Examples
--------
$ tlshark -rogue 
$ tlshark -rogue -json /path/to/cerlog_ID_1352.json 




TRANSPARENT MITMPROXY MODE: [-i, -json, -certfrom_tlshark/-certfrom_mitmproxy/-certfrom_path]
---------------------------
This mode uses information hosted in the json files stored in the cerlog_json folder to raise a 
transparent proxy and intercept a Client-Server communication via a man-in-the-middle attack.  
The available servers to intercept will be displayed and once one is chosen, the following 
configurations will be made.
	1.- Traffic redirection is enabled for the proxy to operate in transparent mode.
	2.- Use of the shortest available routes is disabled, bypassing the proxy.
	3.- It takes the server port and enables forwarding of traffic received on the proxy on 
	    that port to port 8080 where mitmproxy is running. 
	4.- The proxy is raised with the chosen certificate according to the flags 
	    -certfrom_tlshark/-certfrom_mitmproxy/-certfrom_path.
	    
Avaiable flags:
	-i: indicates the interface on which port forwarding is performed. eth0 by default.
	-json: allows to load the information to raise a proxy from a specific json file, in the 
	       format generated by Cerlog.
	-certfrom_tlshark: select the certificate or chain of cloned certificates and private key 
	                   generated by Apostille.
	-certfrom_mitmproxy: select a self-signed certificate with the mitmproxy CA and its 
			     corresponding private key.
	-certfrom_path: select a certificate and its key from a specific path

> This mode uses the json files generated by the Cerlog mode, so the Cerlog mode must be run first 
  in order to fill the cerlog_json folder or load the information from a json file. a json file. 

> When the proxy is up, mitmproxy's own interface will be launched (see mitmproxy manual for the 
  management of this interface). Here you can see the traffic passing through the proxy.

> Closing the mitmproxy interface (q) will shut down the proxy and undo the redirection settings 
  made at the beginning of this mode.

> This mode must be run with administrator permissions, otherwise it will ask for them during 
  execution.

> If the -certfrom_path flag is used, the absolute path of the certificate must be provided. 
  This must be in .pem format and look like this.
  
  -----BEGIN PRIVATE KEY-----
	<private key>
  -----END PRIVATE KEY-----
  -----BEGIN CERTIFICATE-----
	<cert>
  -----END CERTIFICATE-----

> As a user, you must ensure that the client machine redirects traffic through the proxy, reassigning
  the determined gateway.

Examples
--------
$ sudo tlshark -mitmproxy -certfrom_mitmproxy
$ sudo tlshark -mitmproxy -certfrom_path path/to/certificate.pem -json path/to/cerlog_ID_1352.json




REVERSE MITMPROXY MODE: [-url]
-----------------------
This mode is similar to the transparent proxy mode, but it raises a reverse proxy instead of a transparent 
one. In addition, the information to raise this proxy is collected directly from the url specified by the 
from the url specified by the -url flag.

Avaiable flags:
	-url: indicates the url from which the information to raise the proxy should be collected.

> As a user, you must ensure that the client machine redirects traffic through the proxy, for example, 
  by modifying the file /etc/hosts.
	
Examples
--------
$ tlshark -rev_mitmproxy -url www.example_url.com




TLS VERSION DETECTOR MODE: [-json]
--------------------------
This mode allows to discover the TLS version used by a host. Its algorithm raises a server from the 
information contained in the json files stored in the cerlog_json folder with the version tlsv1.3 and waits 
for a connection. When a host wants to connect to this server, it detects if a TLS version incompatibility 
error is generated. The server is closed, a new one with a lower TLS version is raised and it waits again 
for a connection to detect TLS compatibility and so on with all TLS versions (tlsv1.3, tlsv1.2, tlsv1.1 and 
tlsv1).  Finally a table with the results is printed on the screen.

Avaiable flags:
	-json: allows to load information from a server from a specific json file,in the format generated 
	       by Cerlog.
	
Examples
--------
$ tlshark -tls_vdetector




Tips
----
You can use Verbose and Cerlog mode simultaneously by running tlshark on different terminals. 
This will allow you to visualize the information being collected for spoofing using Cerlog mode 
while being able to see the underlying traffic in more detail using the Verbose mode.


